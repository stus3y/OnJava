package com.OnJava.Chapter13;interface Strategy {    String approach(String msg);}class Soft implements Strategy {    @Override    public String approach(String msg) {        return msg.toLowerCase() + "?";    }}class Unrelated {    static String twice(String msg) {        return msg + " " + msg;    }}class ThreeTimes {    static String three(String msg) {        return msg + ' ' + msg + ' ' + msg;    }}public class Strategize {    Strategy strategy;    String msg;    Strategize(String msg) {        strategy = new Soft();        this.msg = msg;    }    void communicate() {        System.out.println(strategy.approach(msg));    }    void changeStrategy(Strategy strategy) {        this.strategy = strategy;    }    public static void main(String[] args) {        Strategy[] strategies = {            msg -> msg.toUpperCase() + "!",            msg -> msg.substring(0, 5),            // 方法引用            Unrelated::twice,            msg -> { return msg.toUpperCase() + "??"; },            ThreeTimes::three        };        Strategize s = new Strategize("Hello there");        s.communicate();        for (Strategy strategy : strategies) {            s.changeStrategy(strategy);            s.communicate();        }    }}